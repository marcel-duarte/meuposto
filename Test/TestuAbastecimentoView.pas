unit TestuAbastecimentoView;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  uAbastecimentoView,

//  uCombustivelModel,
//  uImpostoController,
//  uImpostoModel,
//  uAbastecimentoModel,
//  uBombaController,
//  uAbastecimentoController,
//  UBombaModel,
//  uCombustivelController,

  TestFramework,
  System.UITypes,
  System.Classes,
  Vcl.ExtCtrls,
  Vcl.StdCtrls,
  Vcl.Grids,
  Vcl.ComCtrls,
  Vcl.Graphics,
  Vcl.DBCtrls,
  Winapi.Windows,
  System.Variants,
  Winapi.Messages,
  Vcl.Dialogs,
  System.Generics.Collections,
  Vcl.Forms,
  System.SysUtils,
  System.StrUtils,
  Vcl.Controls,
  Vcl.Mask,
  Vcl.DBGrids,
  DateUtils;

type
  // Test methods for class TfrmAbastecimento

  TestTfrmAbastecimento = class(TTestCase)
  strict private
    FfrmAbastecimento: TfrmAbastecimento;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExcluirRegistro;
    procedure TestConfirmarRegistro;
  end;

implementation

procedure TestTfrmAbastecimento.SetUp;
begin
  FfrmAbastecimento := TfrmAbastecimento.Create(nil);
end;

procedure TestTfrmAbastecimento.TearDown;
begin
  FfrmAbastecimento.Free;
  FfrmAbastecimento := nil;
end;

procedure TestTfrmAbastecimento.TestExcluirRegistro;
var
  ReturnValue: Boolean;
  pErro: string;
  pIdAbastecimento: Integer;
begin
  pIdAbastecimento := 1;

  ReturnValue := FfrmAbastecimento.ExcluirRegistro(pIdAbastecimento, pErro);

  CheckEquals(True, ReturnValue, pErro);
end;

procedure TestTfrmAbastecimento.TestConfirmarRegistro;
var
  ReturnValue: Boolean;
  pErro: string;
  vValorFinalAbastecimento: Double;
  vValorImposto: Double;
  vValorAbastecimento: Double;
  vQtdLitros: Double;
  vIdImposto: Integer;
  vIdCombustivel: Integer;
  vIdBomba: Integer;
  vDataAbastecimento: TDateTime;
begin
  vDataAbastecimento := Date();
  vIdBomba := 1;
  vIdCombustivel := 1;
  vIdImposto := 1;
  vQtdLitros := 10;
  vValorAbastecimento := 5.00;
  vValorImposto := 6.5;
  vValorFinalAbastecimento := 43.50;

  ReturnValue := FfrmAbastecimento.ConfirmarRegistro(vDataAbastecimento, vIdBomba,
      vIdCombustivel, vIdImposto, vQtdLitros, vValorAbastecimento, vValorImposto,
      vValorFinalAbastecimento, pErro);

  CheckEquals(True, ReturnValue, pErro);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTfrmAbastecimento.Suite);
end.

